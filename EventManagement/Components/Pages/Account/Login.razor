@page "/login"

@using EventManagement.Models.ViewModels
@using EventManagement.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject MyAppDbContext myappDbContext
@inject NavigationManager navigationManager
@inject IHttpContextAccessor HttpContextAccessor


@* <div class="row">
    <div class="col-lg-4 offset-lg-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator/>
            <div class="mb-3 text-center flex-column">
                <h3>Login</h3>
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="Username"/>
                <ValidationMessage For="() => Model.UserName"/>
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">errorMessage</span>

            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>

</div> *@

<div class="row justify-content-center">
    <div class="col-lg-4 col-md-6 col-sm-8 border rounded shadow-sm p-4 bg-white">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />

            <div class="mb-4 text-center d-flex flex-column align-items-center">
                <h3 class="mb-0 text-primary">
                    <i class="bi bi-box-arrow-in-right me-2"></i> Login
                </h3>
            </div>

            <div class="mb-3">
                <label for="usernameInput" class="form-label">User Name</label>
                <div class="input-group">
                    <span class="input-group-text bg-white">
                        <i class="bi bi-person-fill"></i>
                    </span>
                    <InputText id="usernameInput" @bind-Value="Model.UserName" class="form-control" placeholder="Username" />
                </div>
                <ValidationMessage For="() => Model.UserName" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="passwordInput" class="form-label">Password</label>
                <div class="input-group">
                    <span class="input-group-text bg-white">
                        <i class="bi bi-lock-fill"></i>
                    </span>
                    <InputText id="passwordInput" @bind-Value="Model.Password" type="password" class="form-control" placeholder="Password" />
                </div>
                <ValidationMessage For="() => Model.Password" class="text-danger" />
            </div>

            <div class="mb-3 text-center text-danger">
                @errorMessage
            </div>

            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-box-arrow-in-right me-1"></i> Login
                </button>
            </div>
        </EditForm>
    </div>
</div>



@* @code {
    [CascadingParameter]
    public DefaultHttpContext? HttpContext{ get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {

        var userAccount = myappDbContext.UserAccounts.Where(x => x.UserName == Model.UserName).FirstOrDefault();
        if(userAccount is null || userAccount.Password != Model.Password)
        {
            errorMessage = "Invalid User Name or Password";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.UserName),
            new Claim(ClaimTypes.Role, userAccount.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        
        await HttpContext.SignInAsync(principal);

        navigationManager.NavigateTo("/");
    }
} *@

@code {
    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var userAccount = myappDbContext.UserAccounts.FirstOrDefault(x => x.UserName == Model.UserName);

        if (userAccount is null || userAccount.Password != Model.Password)
        {
            errorMessage = "Invalid User Name or Password";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.UserName),
            new Claim(ClaimTypes.Role, userAccount.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        var httpContext = HttpContextAccessor.HttpContext;

        if (httpContext != null)
        {
            await httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
            navigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "Unexpected error occurred. Please try again.";
        }
    }
}

