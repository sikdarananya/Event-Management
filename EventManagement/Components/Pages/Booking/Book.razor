@page "/book-now"
@using Microsoft.EntityFrameworkCore
@using EventManagement.Models
@using EventManagement.Data
@implements IAsyncDisposable
@inject IHttpContextAccessor HttpContextAccessor
@inject IDbContextFactory<EventManagement.Data.MyAppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Events</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4 text-center text-primary">Upcoming Events</h1>

    @if (eventList == null || !eventList.Any())
    {
        <p class="text-center">No events available.</p>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var evt in eventList)
            {
                var isToday = evt.StartTime.Date == DateTime.UtcNow.Date;

                <div class="col">
                    <div class="card h-100 shadow-sm @(isToday ? "border-warning border-3" : "")">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title text-primary">
                                @evt.Title
                                @if (isToday)
                                {
                                    <span class="badge bg-warning text-dark ms-2">Today</span>
                                }
                            </h5>

                            <p class="card-text flex-grow-1">@evt.Description</p>

                            <p class="card-text mb-1">
                                <strong>Start:</strong> @evt.StartTime.ToString("f")
                            </p>
                            <p class="card-text mb-3">
                                <strong>End:</strong> @evt.EndTime.ToString("f")
                            </p>
                            <p class="card-text">
                                <strong>Location:</strong> @evt.Location
                            </p>

                            <a href="/book-event/@evt.Id" class="btn btn-success mt-auto">
                                <i class="bi bi-ticket-perforated"></i> Book Now
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private MyAppDbContext context = default!;
    private List<Events> eventList = new();

    protected override async Task OnInitializedAsync()
    {
        var userName = HttpContextAccessor.HttpContext?.User?.Identity?.Name;

        if (string.IsNullOrEmpty(userName) || userName == "Anonymous")
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        context = DbFactory.CreateDbContext();

        // eventList = await context.Events
        //     .Where(e => e.StartTime >= DateTime.UtcNow.Date)
        //     .OrderBy(e => e.StartTime)
        //     .ToListAsync();
        eventList = await context.Events
                .Where(e => e.StartTime >= DateTime.UtcNow.Date && !e.IsCancelled)
                .OrderBy(e => e.StartTime)
                .ToListAsync();

    }

    private void BookNow(int eventId)
    {
        NavigationManager.NavigateTo($"/book-event?id={eventId}");
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
