@page "/events/delete"
@using Microsoft.EntityFrameworkCore
@using EventManagement.Models
@inject IDbContextFactory<EventManagement.Data.MyAppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1 class="text-center text-danger mb-3">Delete Event</h1>

<div class="container">
    <p class="lead text-center text-warning mb-4">Are you sure you want to delete this event?</p>

    <h2 class="text-secondary">Event Details</h2>
    <hr />

    @if (events is null)
    {
        <p class="text-center"><em>Loading...</em></p>
    }
    else
    {
        <dl class="row bg-light p-4 rounded shadow-sm mb-4">
            <dt class="col-sm-3 fw-semibold">Title</dt>
            <dd class="col-sm-9">@events.Title</dd>

            <dt class="col-sm-3 fw-semibold">Description</dt>
            <dd class="col-sm-9">@events.Description</dd>

            <dt class="col-sm-3 fw-semibold">Start Time</dt>
            <dd class="col-sm-9">@events.StartTime.ToString("f")</dd>

            <dt class="col-sm-3 fw-semibold">End Time</dt>
            <dd class="col-sm-9">@events.EndTime.ToString("f")</dd>

            <dt class="col-sm-3 fw-semibold">Location</dt>
            <dd class="col-sm-9">@events.Location</dd>
        </dl>

        <EditForm method="post" Model="events" OnValidSubmit="DeleteEvents" FormName="delete" Enhance>
            <div class="d-flex justify-content-center gap-3">
                <button type="submit" class="btn btn-danger px-4" disabled="@(events is null)">
                    <i class="bi bi-trash3"></i> Confirm Delete
                </button>
                <a href="/events" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left-circle"></i> Cancel
                </a>
            </div>
        </EditForm>
    }
</div>


@code {
    private Events? events;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        events = await context.Events.FirstOrDefaultAsync(m => m.Id == Id);

        if (events is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // private async Task DeleteEvents()
    // {
    //     using var context = DbFactory.CreateDbContext();
    //     context.Events.Remove(events!);
    //     await context.SaveChangesAsync();
    //     NavigationManager.NavigateTo("/events");
    // }

    private async Task DeleteEvents()
{
    using var context = DbFactory.CreateDbContext();

    var evt = await context.Events.FirstOrDefaultAsync(e => e.Id == Id);
    if (evt is null)
    {
        NavigationManager.NavigateTo("/notfound");
        return;
    }

    evt.IsCancelled = true;
    await context.SaveChangesAsync();

    NavigationManager.NavigateTo("/events");
}

}
